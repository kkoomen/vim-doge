# ==============================================================================
# Functions using the Google doc standard.
# ==============================================================================
Given python(function without paramters without return type where b:doge_doc_standard='google'):
  def myFunc():
    pass


Do (trigger doge):
  :let b:doge_doc_standard='google'\<CR>
  \<C-d>

Expect python (generated comment with nothing but the summary and description 'TODO'):
  def myFunc():
    """[TODO:summary]

    [TODO:description]
    """
    pass

# ------------------------------------------------------------------------------

Given python(function with parameters without type hints without return type where b:doge_doc_standard='google'):
  def myFunc(p1, p2, p3 = ''):
    pass

Do (trigger doge):
  :let b:doge_doc_standard='google'\<CR>
  \<C-d>

Expect python (generated comment with Args tags):
  def myFunc(p1, p2, p3 = ''):
    """[TODO:summary]

    [TODO:description]

    Args:
      p1 ([TODO:type]): [TODO:description]
      p2 ([TODO:type]): [TODO:description]
      p3 ([TODO:type]): [TODO:description]
    """
    pass

# ------------------------------------------------------------------------------

Given python(function with parameters with type hints without return type where b:doge_doc_standard='google'):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []):
    pass

Do (trigger doge):
  :let b:doge_doc_standard='google'\<CR>
  \<C-d>

Expect python (generated comment with Args tags):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []):
    """[TODO:summary]

    [TODO:description]

    Args:
      p1 ([TODO:type]): [TODO:description]
      p2: [TODO:description]
      p3: [TODO:description]
    """
    pass

# ------------------------------------------------------------------------------

Given python(function with parameters with type hints with return type where b:doge_doc_standard='google'):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []) -> Sequence[T]:
    pass

Do (trigger doge):
  :let b:doge_doc_standard='google'\<CR>
  \<C-d>

Expect python (generated comment with Args and Returns tags):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []) -> Sequence[T]:
    """[TODO:summary]

    [TODO:description]

    Args:
      p1 ([TODO:type]): [TODO:description]
      p2: [TODO:description]
      p3: [TODO:description]

    Returns:
      [TODO:description]
    """
    pass

# ==============================================================================
# Read out the exceptions in the function body
# ==============================================================================
Given python (function with exceptions being raised in the body):
  def myFunc(p1 = 'string'):
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

Do (trigger doge):
  :let b:doge_doc_standard='google'\<CR>
  \<C-d>

Expect python (generated comment with :param and :raises tags):
  def myFunc(p1 = 'string'):
    """[TODO:summary]

    [TODO:description]

    Args:
      p1 ([TODO:type]): [TODO:description]

    Raises:
      [TODO:name]: [TODO:description]
      Exception: [TODO:description]
    """
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

# ==============================================================================
# Test setting 'omit_redundant_param_types'
# ==============================================================================
Given python (setting: omit_redundant_param_types):
  def myFunc(p1 = 'string'):
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

  def myFunc(p1 = 'string') -> str:
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

  def myFunc(p1 = 'string'):
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

  def myFunc(p1 = 'string') -> str:
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

Do (trigger doge):
  :let b:doge_doc_standard='google'\<CR>
  :let g:doge_python_settings['omit_redundant_param_types'] = 1\<CR>
  \<C-d>
  :20\<CR>
  \<C-d>
  :let g:doge_python_settings['omit_redundant_param_types'] = 0\<CR>
  :42\<CR>
  \<C-d>
  :61\<CR>
  \<C-d>
  :let g:doge_python_settings['omit_redundant_param_types'] = 1\<CR>

Expect python (generated comment):
  def myFunc(p1 = 'string'):
    """[TODO:summary]

    [TODO:description]

    Args:
      p1 ([TODO:type]): [TODO:description]

    Raises:
      [TODO:name]: [TODO:description]
      Exception: [TODO:description]
    """
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

  def myFunc(p1 = 'string') -> str:
    """[TODO:summary]

    [TODO:description]

    Args:
      p1 ([TODO:type]): [TODO:description]

    Returns:
      [TODO:description]

    Raises:
      [TODO:name]: [TODO:description]
      Exception: [TODO:description]
    """
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

  def myFunc(p1 = 'string'):
    """[TODO:summary]

    [TODO:description]

    Args:
      p1 ([TODO:type]): [TODO:description]

    Raises:
      [TODO:name]: [TODO:description]
      Exception: [TODO:description]
    """
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

  def myFunc(p1 = 'string') -> str:
    """[TODO:summary]

    [TODO:description]

    Args:
      p1 ([TODO:type]): [TODO:description]

    Returns:
      str: [TODO:description]

    Raises:
      [TODO:name]: [TODO:description]
      Exception: [TODO:description]
    """
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass
