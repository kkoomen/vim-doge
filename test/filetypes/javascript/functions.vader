# ==============================================================================
# Functions without parameters.
# ==============================================================================
Given javascript (function without parameters):
  function myFunc(/* inline comment */) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with a description and a @returns tag):
  /**
   * [TODO:description]
   *
   */
  function myFunc(/* inline comment */) {}

# ==============================================================================
# Functions with parameters without type hints.
# ==============================================================================
Given javascript (function with parameters without type hints):
  function myFunc($p1 = 'value', p2 = [], p3, p4 /* inline comment */) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with a description, @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} [$p1] - [TODO:description]
   * @param {[TODO:type]} [p2] - [TODO:description]
   * @param {[TODO:type]} p3 - [TODO:description]
   * @param {[TODO:type]} p4 - [TODO:description]
   */
  function myFunc($p1 = 'value', p2 = [], p3, p4 /* inline comment */) {}

# ==============================================================================
# Functions with parameters with type hints.
# ==============================================================================
Given javascript (function with parameters with type hints):
  function myFunc($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[]  {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @param {string} [$p1] - [TODO:description]
   * @param {string[]} [p2] - [TODO:description]
   * @param {number} p3 - [TODO:description]
   * @param {float} p4 - [TODO:description]
   * @returns {string[]} [TODO:description]
   */
  function myFunc($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[]  {}

# ==============================================================================
# Functions as variables with parameters without type hints.
# ==============================================================================
Given javascript (function as variable with parameters without type hints):
  var myFunc = function($p1 = 'value', p2 = [], p3, p4) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @functon and @param tags):
  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} [$p1] - [TODO:description]
   * @param {[TODO:type]} [p2] - [TODO:description]
   * @param {[TODO:type]} p3 - [TODO:description]
   * @param {[TODO:type]} p4 - [TODO:description]
   */
  var myFunc = function($p1 = 'value', p2 = [], p3, p4) {}

# ==============================================================================
# Functions as variables with parameters with type hints.
# ==============================================================================
Given javascript (function as variable with parameters with type hints):
  var myFunc = function($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[]  {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @param {string} [$p1] - [TODO:description]
   * @param {string[]} [p2] - [TODO:description]
   * @param {number} p3 - [TODO:description]
   * @param {float} p4 - [TODO:description]
   * @returns {string[]} [TODO:description]
   */
  var myFunc = function($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[]  {}

# ==============================================================================
# Prototype functions with parameters with type hints.
# ==============================================================================
Given javascript (prototype function with parameters with type hints):
  Person.prototype.greet = function (p1: string = 'default', p2: Immutable.List = Immutable.List()): string[] {};

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @function, @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @function Person#greet
   * @param {string} [p1] - [TODO:description]
   * @param {Immutable.List} [p2] - [TODO:description]
   * @returns {string[]} [TODO:description]
   */
  Person.prototype.greet = function (p1: string = 'default', p2: Immutable.List = Immutable.List()): string[] {};

# ==============================================================================
# Prototype functions without parameters without type hints.
# ==============================================================================
Given javascript (prototype function without parameters without type hints):
  Person.prototype.greet = function () {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @function, @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @function Person#greet
   */
  Person.prototype.greet = function () {}

# ==============================================================================
# Functions with parameters with multiple type hints.
# ==============================================================================
Given javascript (function with parameters with multiple type hints):
  function myFunc($p1: string, p2: Foo | Bar | Baz): (Foo | Bar) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @param {string} $p1 - [TODO:description]
   * @param {Foo | Bar | Baz} p2 - [TODO:description]
   * @returns {Foo | Bar} [TODO:description]
   */
  function myFunc($p1: string, p2: Foo | Bar | Baz): (Foo | Bar) {}

# ==============================================================================
# Async functions with parameters without typehints.
# ==============================================================================
Given javascript (async function with parameters without type hints):
  async function myFunc($p1 = 'value', p2 = [], p3, p4) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @async, @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @async
   * @param {[TODO:type]} [$p1] - [TODO:description]
   * @param {[TODO:type]} [p2] - [TODO:description]
   * @param {[TODO:type]} p3 - [TODO:description]
   * @param {[TODO:type]} p4 - [TODO:description]
   * @returns {Promise<[TODO:type]>} [TODO:description]
   */
  async function myFunc($p1 = 'value', p2 = [], p3, p4) {}

# ==============================================================================
# Generator functions with parameters without typehints.
# ==============================================================================
Given javascript (generator function with parameters without type hints):
  function* myFunc($p1 = 'value', p2 = [], p3, p4) {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with a description, @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @generator
   * @param {[TODO:type]} [$p1] - [TODO:description]
   * @param {[TODO:type]} [p2] - [TODO:description]
   * @param {[TODO:type]} p3 - [TODO:description]
   * @param {[TODO:type]} p4 - [TODO:description]
   */
  function* myFunc($p1 = 'value', p2 = [], p3, p4) {}

# ==============================================================================
# Generator functions.
# ==============================================================================
Given javascript (generator functions):
  async function* myFunc($p1 = 'value', p2 = [], p3, p4) {}

  var perfectSquares = function*(p1) {};

Do (trigger doge):
  \<C-d>
  :14\<CR>
  \<C-d>

Expect javascript (generated comment with @async, @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @async
   * @generator
   * @param {[TODO:type]} [$p1] - [TODO:description]
   * @param {[TODO:type]} [p2] - [TODO:description]
   * @param {[TODO:type]} p3 - [TODO:description]
   * @param {[TODO:type]} p4 - [TODO:description]
   * @returns {Promise<[TODO:type]>} [TODO:description]
   */
  async function* myFunc($p1 = 'value', p2 = [], p3, p4) {}

  /**
   * [TODO:description]
   *
   * @generator
   * @param {[TODO:type]} p1 - [TODO:description]
   */
  var perfectSquares = function*(p1) {};

# ==============================================================================
# Class with functions with parameters and return type.
# ==============================================================================
Given javascript (class with functions with parameters and return type and differrent data modifiers):
  export class Test {

    public printSomething(something?: string): void {}

    protected printSomething(something?: string): void {}

    private printSomething(something?: string): void {}

  }

Do (trigger doge):
  :3\<CR>
  \<C-d>
  :10\<CR>
  \<C-d>
  :17\<CR>
  \<C-d>

Expect javascript (generated comment with a description, @param and @returns tags):
  export class Test {

    /**
     * [TODO:description]
     *
     * @param {string} [something] - [TODO:description]
     */
    public printSomething(something?: string): void {}

    /**
     * [TODO:description]
     *
     * @param {string} [something] - [TODO:description]
     */
    protected printSomething(something?: string): void {}

    /**
     * [TODO:description]
     *
     * @param {string} [something] - [TODO:description]
     */
    private printSomething(something?: string): void {}

  }

# ==============================================================================
# Read out the exceptions in the function body
# ==============================================================================
Given javascript (functions with exceptions being thrown in the body):
  export class Test {
    public printSomething(something?: string): void {
      err = new CustomException();
      throw err;
      throw new CustomException();
    }
  }

  function test() {
    err = new CustomException();
    throw err;
    throw new CustomException();
  }

Do (trigger doge):
  :2\<CR>
  \<C-d>
  :16\<CR>
  \<C-d>

Expect javascript (generated comments with a description, @param, @throws and @returns tags):
  export class Test {
    /**
     * [TODO:description]
     *
     * @param {string} [something] - [TODO:description]
     * @throws {[TODO:name]} - [TODO:description]
     * @throws {CustomException} - [TODO:description]
     */
    public printSomething(something?: string): void {
      err = new CustomException();
      throw err;
      throw new CustomException();
    }
  }

  /**
   * [TODO:description]
   *
   * @throws {[TODO:name]} - [TODO:description]
   * @throws {CustomException} - [TODO:description]
   */
  function test() {
    err = new CustomException();
    throw err;
    throw new CustomException();
  }

# ==============================================================================
# Test the 'destructuring_props' option
# ==============================================================================
Given javascript (functions with destructuring_props):
  function foo({ a, b: str, c = 3, d: int = 5 }) {}

  function foo({ a, b: str, c = 3, d: int = 5 }) {}

Do (trigger doge):
  :let g:doge_javascript_settings['destructuring_props'] = 1\<CR>
  :1\<CR>
  \<C-d>
  :let g:doge_javascript_settings['destructuring_props'] = 0\<CR>
  :12\<CR>
  \<C-d>
  :let g:doge_javascript_settings['destructuring_props'] = 1\<CR>

Expect javascript (generated comments with a description, @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} [TODO:name] - [TODO:description]
   * @param {[TODO:type]} [TODO:name].a - [TODO:description]
   * @param {str} [TODO:name].b - [TODO:description]
   * @param {[TODO:type]} [[TODO:name].c] - [TODO:description]
   * @param {int} [[TODO:name].d] - [TODO:description]
   */
  function foo({ a, b: str, c = 3, d: int = 5 }) {}

  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} [TODO:name] - [TODO:description]
   */
  function foo({ a, b: str, c = 3, d: int = 5 }) {}

# ==============================================================================
# Test the 'omit_redundant_param_types' option
# ==============================================================================
Given javascript (functions where the type should be omitted if let g:doge_javascript_settings = {'omit_redundant_param_types': 1} is set):
  function foo(a, b: str, c = 3, d: int = 5): int {}

  function foo(a, b: str, c = 3, d: int = 5): void {}

  function foo(a, b: str, c = 3, d: int = 5): int {}

  function foo(a, b: str, c = 3, d: int = 5): Promise<void> {}

  function foo(a, b: str, c = 3, d: int = 5): Promise<int> {}

Do (trigger doge):
  :let g:doge_javascript_settings['omit_redundant_param_types'] = 1\<CR>
  \<C-d>
  :12\<CR>
  \<C-d>
  :22\<CR>
  \<C-d>
  :33\<CR>
  \<C-d>
  :44\<CR>
  \<C-d>
  :let g:doge_javascript_settings['omit_redundant_param_types'] = 0\<CR>

Expect javascript (generated comments with a description, @param and @returns tags):
  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} a - [TODO:description]
   * @param b - [TODO:description]
   * @param {[TODO:type]} [c] - [TODO:description]
   * @param [d] - [TODO:description]
   * @returns [TODO:description]
   */
  function foo(a, b: str, c = 3, d: int = 5): int {}

  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} a - [TODO:description]
   * @param b - [TODO:description]
   * @param {[TODO:type]} [c] - [TODO:description]
   * @param [d] - [TODO:description]
   */
  function foo(a, b: str, c = 3, d: int = 5): void {}

  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} a - [TODO:description]
   * @param b - [TODO:description]
   * @param {[TODO:type]} [c] - [TODO:description]
   * @param [d] - [TODO:description]
   * @returns [TODO:description]
   */
  function foo(a, b: str, c = 3, d: int = 5): int {}

  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} a - [TODO:description]
   * @param b - [TODO:description]
   * @param {[TODO:type]} [c] - [TODO:description]
   * @param [d] - [TODO:description]
   * @returns [TODO:description]
   */
  function foo(a, b: str, c = 3, d: int = 5): Promise<void> {}

  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} a - [TODO:description]
   * @param b - [TODO:description]
   * @param {[TODO:type]} [c] - [TODO:description]
   * @param [d] - [TODO:description]
   * @returns [TODO:description]
   */
  function foo(a, b: str, c = 3, d: int = 5): Promise<int> {}
